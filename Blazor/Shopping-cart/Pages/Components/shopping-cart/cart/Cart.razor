@namespace Shopping_cart
@using Shopping_cart.Service
@using Shopping_cart.Model
@inherits Blazor.Fluxor.Components.FluxorComponent
@inject CartService CartService
@using Blazor.Fluxor
@using Shopping_cart.Store.Cart
@inject IDispatcher Dispatcher
@inject IState<CartState> FetchDataState



<div class="card shadow-sm">
    @if (FetchDataState.Value.carts == null || FetchDataState.Value.carts.Length == 0)
    {
        <div class="alert alert-info">
            Empty cart.
        </div>

    }
    else
    {
        <div class="card-header">
            <strong>Cart</strong>
        </div>
        <div class="card-bodys">
            <ul class="list-group">
                @foreach (var Item in CartItemManipulate(FetchDataState.Value.carts))
                {
                    <CartItem cartItem=@Item />
                }

                <li class="list-group-item active">
                    Total : <strong>@GetCartTotal(FetchDataState.Value.carts)</strong>
                </li>
            </ul>
        </div>
    }
</div>
@code {




    protected override void OnInitialized()
    {
        Console.WriteLine("Inside cart");
        // cartList = CartItemManipulate(await CartService.GetCartAsync());
        Dispatcher.Dispatch(new CartGetDataAction());


        @* cartList = CartItemManipulate(FetchDataState.Value.carts);
            cartTotal = GetCartTotal(); *@
    }

    private Carts[] CartItemManipulate(Carts[] products)
    {
        List<Carts> cartItems = new List<Carts>();
        foreach (var prds in products)
        {
            bool itemExists = false;
            foreach (var item in cartItems)
            {
                if (item.ProductId == prds.ProductId)
                {
                    item.Qty++;
                    itemExists = true;
                    break;
                }
            }

            if (!itemExists)
            {
                cartItems.Add(new Carts
                {
                    ProductId = prds.ProductId,
                    ProductName = prds.ProductName,
                    Price = prds.Price,
                    Qty = 1
                });
            }
        }
        return cartItems.ToArray();
    }

    private long GetCartTotal(Carts[] cartList)
    {
        long total = 0;
        foreach (var item in cartList)
        {
            total += item.Price * item.Qty;
        }

        return total;

    }
}